package gbemu.memory;

import gbemu.graphics.GPU;

public class Memory {

	private short[] bios = { 0x31, 0xFE, 0xFF, 0xAF, 0x21, 0xFF, 0x9F, 0x32,
			0xCB, 0x7C, 0x20, 0xFB, 0x21, 0x26, 0xFF, 0x0E, 0x11, 0x3E, 0x80,
			0x32, 0xE2, 0x0C, 0x3E, 0xF3, 0xE2, 0x32, 0x3E, 0x77, 0x77, 0x3E,
			0xFC, 0xE0, 0x47, 0x11, 0x04, 0x01, 0x21, 0x10, 0x80, 0x1A, 0xCD,
			0x95, 0x00, 0xCD, 0x96, 0x00, 0x13, 0x7B, 0xFE, 0x34, 0x20, 0xF3,
			0x11, 0xD8, 0x00, 0x06, 0x08, 0x1A, 0x13, 0x22, 0x23, 0x05, 0x20,
			0xF9, 0x3E, 0x19, 0xEA, 0x10, 0x99, 0x21, 0x2F, 0x99, 0x0E, 0x0C,
			0x3D, 0x28, 0x08, 0x32, 0x0D, 0x20, 0xF9, 0x2E, 0x0F, 0x18, 0xF3,
			0x67, 0x3E, 0x64, 0x57, 0xE0, 0x42, 0x3E, 0x91, 0xE0, 0x40, 0x04,
			0x1E, 0x02, 0x0E, 0x0C, 0xF0, 0x44, 0xFE, 0x90, 0x20, 0xFA, 0x0D,
			0x20, 0xF7, 0x1D, 0x20, 0xF2, 0x0E, 0x13, 0x24, 0x7C, 0x1E, 0x83,
			0xFE, 0x62, 0x28, 0x06, 0x1E, 0xC1, 0xFE, 0x64, 0x20, 0x06, 0x7B,
			0xE2, 0x0C, 0x3E, 0x87, 0xE2, 0xF0, 0x42, 0x90, 0xE0, 0x42, 0x15,
			0x20, 0xD2, 0x05, 0x20, 0x4F, 0x16, 0x20, 0x18, 0xCB, 0x4F, 0x06,
			0x04, 0xC5, 0xCB, 0x11, 0x17, 0xC1, 0xCB, 0x11, 0x17, 0x05, 0x20,
			0xF5, 0x22, 0x23, 0x22, 0x23, 0xC9, 0xCE, 0xED, 0x66, 0x66, 0xCC,
			0x0D, 0x00, 0x0B, 0x03, 0x73, 0x00, 0x83, 0x00, 0x0C, 0x00, 0x0D,
			0x00, 0x08, 0x11, 0x1F, 0x88, 0x89, 0x00, 0x0E, 0xDC, 0xCC, 0x6E,
			0xE6, 0xDD, 0xDD, 0xD9, 0x99, 0xBB, 0xBB, 0x67, 0x63, 0x6E, 0x0E,
			0xEC, 0xCC, 0xDD, 0xDC, 0x99, 0x9F, 0xBB, 0xB9, 0x33, 0x3E, 0x3c,
			0x42, 0xB9, 0xA5, 0xB9, 0xA5, 0x42, 0x4C, 0x21, 0x04, 0x01, 0x11,
			0xA8, 0x00, 0x1A, 0x13, 0xBE, 0x20, 0xFE, 0x23, 0x7D, 0xFE, 0x34,
			0x20, 0xF5, 0x06, 0x19, 0x78, 0x86, 0x23, 0x05, 0x20, 0xFB, 0x86,
			0x20, 0xFE, 0x3E, 0x01, 0xE0, 0x50 };
	private short[] cart0 = new short[0x4000];
	private short[] cart1 = new short[0x4000];
	private short[] extRAM = new short[0x2000];
	private short[] RAM = new short[0x2000];
	private short[] graphics = new short[0xA0];
	private short[] io = new short[0x80];
	private short[] zeroRAM = new short[0x80];

	private boolean inBios;
	private GPU gpu;

	public Memory(GPU gpu) {

		this.gpu = gpu;
		inBios = true;

	}

	public void leaveBios() {
		inBios = false;
	}

	public int readByte(int addr) throws IllegalMemoryAccessException {

		if (addr <= 0x00FF && inBios) {

			return bios[addr];
		} else if (addr <= 0x3FFF) {
			return cart0[addr];
		} else if (addr >= 0x4000 && addr <= 0x7FFF) {
			return cart1[addr - 0x4000];
		} else if (addr >= 0x8000 && addr <= 0x9FFF) {
			return gpu.readByte(addr);
		} else if (addr >= 0xA000 && addr <= 0xBFFF) {
			return extRAM[addr - 0xA000];
		} else if (addr >= 0xC000 && addr <= 0xDFFF) {
			return RAM[addr - 0xC000];
		} else if (addr >= 0xE000 && addr <= 0xFDFF) {
			return RAM[addr - 0xE000];
		} else if (addr >= 0xFE00 && addr <= 0xFE9F) {
			return graphics[addr - 0xFE00];
		} else if (addr >= 0xFF00 && addr <= 0xFF7F) {
			if (addr >= 0xFF40) {
				return gpu.readByte(addr);
			} else {
				return io[addr - 0xFF00];
			}
		} else if (addr >= 0xFF80 && addr <= 0xFFFF) {
			return zeroRAM[addr - 0xFF80];
		} else {
			throw new IllegalMemoryAccessException("Memory address "
					+ Integer.toHexString(addr) + " is not accessible.");
		}

	}

	public void writeByte(int addr, int value)
			throws IllegalMemoryAccessException {
		if (value > 0xFF) {
			throw new UnsupportedOperationException("Value " + value
					+ " is too big to be written to address "
					+ Integer.toHexString(addr));
		}
		if (addr <= 0x00FF && inBios) {
			bios[addr] = (short) value;
		} else if (addr <= 0x3FFF) {
			if (addr != 0x2000) {
				throw new IllegalMemoryAccessException("Address "
						+ Integer.toHexString(addr)
						+ " is ROM memory. It can not be written.");
			} else {
				cart0[addr] = (short) value;
			}
		} else if (addr >= 0x4000 && addr <= 0x7FFF) {
			throw new IllegalMemoryAccessException("Address "
					+ Integer.toHexString(addr)
					+ " is ROM memory. It can not be written.");
			// cart1[addr - 0x4000] = (short) value;
		} else if (addr >= 0x8000 && addr <= 0x9FFF) {
			gpu.writeByte(addr, value);
		} else if (addr >= 0xA000 && addr <= 0xBFFF) {
			extRAM[addr - 0xA000] = (short) value;
		} else if (addr >= 0xC000 && addr <= 0xDFFF) {
			RAM[addr - 0xC000] = (short) value;
		} else if (addr >= 0xE000 && addr <= 0xFDFF) {
			RAM[addr - 0xE000] = (short) value;
		} else if (addr >= 0xFE00 && addr <= 0xFE9F) {
			graphics[addr - 0xFE00] = (short) value;
		} else if (addr >= 0xFF00 && addr <= 0xFF7F) {
			if (addr >= 0xFF40) {
				gpu.writeByte(addr, value);
			} else {
				io[addr - 0xFF00] = (short) value;
			}
		} else if (addr >= 0xFF80 && addr <= 0xFFFF) {
			zeroRAM[addr - 0xFF80] = (short) value;
		} else {
			throw new IllegalMemoryAccessException("Memory address "
					+ Integer.toHexString(addr) + " is not accessible.");
		}
	}

	public void loadCart(Cart c) {
		cart0 = c.getBank(0);
		cart1 = c.getBank(1);
	}
}
